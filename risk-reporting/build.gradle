buildscript {

    ext {
        scalaVersion = '2.11.12'
        kotlinVersion = '1.2.71'
		
        springBootVersion = '2.0.5.RELEASE'
        springDataVersion = '2.1.0.RELEASE'
        springVersion = '5.1.0.RELEASE'
		
		protocVersion = '3.6.1'
        protobufVersion = '3.6.1'
        protobufGradleVersion = '0.8.6'
        protostuffVersion = '1.5.9'
		avroVersion = '1.8.2'
        grpcVersion = '1.15.1'
        grpcspringBootVersion = '2.3.1'
                
        lombokVersion = '1.18.2'
		guavaVersion = '26.0-jre'
        
		slf4jVersion = '1.7.25'
        log4jVersion = '2.11.1'
        
		junitVersion = '4.12'
        mockitoVersion = '2.18.3'
        
		jodaTimeVersion = '2.10'
        
		confluentVersion = '5.0.0'
        kafkaVersion = '2.0.0'

        sparkVersion = '2.3.2'
        sparkExcelVersion = '0.8.3'
        hadoopVersion = '2.8.5'
        databricksVersion = '4.0.0'

		
        cassandraVersion = '3.11.2'
        datastaxVersion = '3.4.0'
        postgresqlVersion = '42.2.5'
        hibernateVersion = '5.3.6.Final'
		tornadofxVersion = '1.7.17'

        hamcrestVersion = '1.3'
        jmhVersion = '1.21'
    }
	
    repositories {
        mavenCentral()
        //jcenter()
        //maven { url 'http://repo.spring.io/plugins-release' }
        //maven { url "https://plugins.gradle.org/m2/" }

    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "com.google.protobuf:protobuf-gradle-plugin:${protobufGradleVersion}"
    }
	
	
}


apply plugin: 'com.google.protobuf'
apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'kotlin'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    compile group: 'org.scala-lang', name: 'scala-library', version: "${scalaVersion}"

    compile "io.grpc:grpc-stub:${grpcVersion}"
    compile "io.grpc:grpc-protobuf:${grpcVersion}"
    compile "io.grpc:grpc-netty:${grpcVersion}"

    compile group: 'org.apache.avro', name: 'avro', version: "${avroVersion}"

    compile group: 'org.apache.hadoop', name: 'hadoop-client', version: "${hadoopVersion}"
    compile "org.apache.spark:spark-core_2.11:${sparkVersion}"
    compile "org.apache.spark:spark-sql_2.11:${sparkVersion}"
    compile "org.apache.spark:spark-mllib_2.11:${sparkVersion}"
    compile "org.apache.spark:spark-streaming_2.11:${sparkVersion}"
    compile group: 'com.databricks', name: 'spark-avro_2.11', version: "${databricksVersion}"
    compile group: 'com.twitter', name: 'bijection-avro_2.11', version: '0.9.6'


    compile group: 'com.crealytics', name: 'spark-excel_2.11', version: "${sparkExcelVersion}"

    compile group: 'org.postgresql', name: 'postgresql', version: "${postgresqlVersion}"
    compile "no.tornado:tornadofx:${tornadofxVersion}"

    //compile files('libs/ojdbc6.jar')

	testCompile group: 'junit', name: 'junit', version: "${junitVersion}"

}



sourceSets {
    main {
        proto {
            srcDir 'src/main/resources/proto'
        }
        java {
            srcDirs = ['src/main/java', 'src/main/generated']
        }

        scala {
            srcDirs = ['src/main/scala']
        }
        kotlin {
            srcDirs = ['src/main/kotlin']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}


protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }

    generateProtoTasks {
        ofSourceSet('main').each { task ->
            task.builtins {
                java {
                    outputSubDir = 'generated'
                }
            }
            task.plugins {
                grpc {
                    outputSubDir = 'generated'
                }
            }
        }
    }
    generatedFilesBaseDir = "$projectDir/src/"
}

task cleanProtoGen {
    doFirst {
        delete("$projectDir/src/main/protoGen")
    }
}
clean.dependsOn cleanProtoGen