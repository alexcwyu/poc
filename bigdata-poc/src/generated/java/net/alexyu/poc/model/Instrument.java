/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.alexyu.poc.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Instrument extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3953184214839580011L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Instrument\",\"namespace\":\"net.alexyu.poc.model\",\"fields\":[{\"name\":\"instid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ccy\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"country\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"gicsSector\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"gicsIndustry\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Instrument> ENCODER =
      new BinaryMessageEncoder<Instrument>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Instrument> DECODER =
      new BinaryMessageDecoder<Instrument>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Instrument> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Instrument> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Instrument>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Instrument to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Instrument from a ByteBuffer. */
  public static Instrument fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String instid;
  @Deprecated public java.lang.String ccy;
  @Deprecated public java.lang.String country;
  @Deprecated public java.lang.String gicsSector;
  @Deprecated public java.lang.String gicsIndustry;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Instrument() {}

  /**
   * All-args constructor.
   * @param instid The new value for instid
   * @param ccy The new value for ccy
   * @param country The new value for country
   * @param gicsSector The new value for gicsSector
   * @param gicsIndustry The new value for gicsIndustry
   */
  public Instrument(java.lang.String instid, java.lang.String ccy, java.lang.String country, java.lang.String gicsSector, java.lang.String gicsIndustry) {
    this.instid = instid;
    this.ccy = ccy;
    this.country = country;
    this.gicsSector = gicsSector;
    this.gicsIndustry = gicsIndustry;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return instid;
    case 1: return ccy;
    case 2: return country;
    case 3: return gicsSector;
    case 4: return gicsIndustry;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: instid = (java.lang.String)value$; break;
    case 1: ccy = (java.lang.String)value$; break;
    case 2: country = (java.lang.String)value$; break;
    case 3: gicsSector = (java.lang.String)value$; break;
    case 4: gicsIndustry = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'instid' field.
   * @return The value of the 'instid' field.
   */
  public java.lang.String getInstid() {
    return instid;
  }

  /**
   * Sets the value of the 'instid' field.
   * @param value the value to set.
   */
  public void setInstid(java.lang.String value) {
    this.instid = value;
  }

  /**
   * Gets the value of the 'ccy' field.
   * @return The value of the 'ccy' field.
   */
  public java.lang.String getCcy() {
    return ccy;
  }

  /**
   * Sets the value of the 'ccy' field.
   * @param value the value to set.
   */
  public void setCcy(java.lang.String value) {
    this.ccy = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public java.lang.String getCountry() {
    return country;
  }

  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.String value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'gicsSector' field.
   * @return The value of the 'gicsSector' field.
   */
  public java.lang.String getGicsSector() {
    return gicsSector;
  }

  /**
   * Sets the value of the 'gicsSector' field.
   * @param value the value to set.
   */
  public void setGicsSector(java.lang.String value) {
    this.gicsSector = value;
  }

  /**
   * Gets the value of the 'gicsIndustry' field.
   * @return The value of the 'gicsIndustry' field.
   */
  public java.lang.String getGicsIndustry() {
    return gicsIndustry;
  }

  /**
   * Sets the value of the 'gicsIndustry' field.
   * @param value the value to set.
   */
  public void setGicsIndustry(java.lang.String value) {
    this.gicsIndustry = value;
  }

  /**
   * Creates a new Instrument RecordBuilder.
   * @return A new Instrument RecordBuilder
   */
  public static net.alexyu.poc.model.Instrument.Builder newBuilder() {
    return new net.alexyu.poc.model.Instrument.Builder();
  }

  /**
   * Creates a new Instrument RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Instrument RecordBuilder
   */
  public static net.alexyu.poc.model.Instrument.Builder newBuilder(net.alexyu.poc.model.Instrument.Builder other) {
    return new net.alexyu.poc.model.Instrument.Builder(other);
  }

  /**
   * Creates a new Instrument RecordBuilder by copying an existing Instrument instance.
   * @param other The existing instance to copy.
   * @return A new Instrument RecordBuilder
   */
  public static net.alexyu.poc.model.Instrument.Builder newBuilder(net.alexyu.poc.model.Instrument other) {
    return new net.alexyu.poc.model.Instrument.Builder(other);
  }

  /**
   * RecordBuilder for Instrument instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Instrument>
    implements org.apache.avro.data.RecordBuilder<Instrument> {

    private java.lang.String instid;
    private java.lang.String ccy;
    private java.lang.String country;
    private java.lang.String gicsSector;
    private java.lang.String gicsIndustry;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.alexyu.poc.model.Instrument.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.instid)) {
        this.instid = data().deepCopy(fields()[0].schema(), other.instid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ccy)) {
        this.ccy = data().deepCopy(fields()[1].schema(), other.ccy);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.country)) {
        this.country = data().deepCopy(fields()[2].schema(), other.country);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.gicsSector)) {
        this.gicsSector = data().deepCopy(fields()[3].schema(), other.gicsSector);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.gicsIndustry)) {
        this.gicsIndustry = data().deepCopy(fields()[4].schema(), other.gicsIndustry);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Instrument instance
     * @param other The existing instance to copy.
     */
    private Builder(net.alexyu.poc.model.Instrument other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.instid)) {
        this.instid = data().deepCopy(fields()[0].schema(), other.instid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ccy)) {
        this.ccy = data().deepCopy(fields()[1].schema(), other.ccy);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.country)) {
        this.country = data().deepCopy(fields()[2].schema(), other.country);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.gicsSector)) {
        this.gicsSector = data().deepCopy(fields()[3].schema(), other.gicsSector);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.gicsIndustry)) {
        this.gicsIndustry = data().deepCopy(fields()[4].schema(), other.gicsIndustry);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'instid' field.
      * @return The value.
      */
    public java.lang.String getInstid() {
      return instid;
    }

    /**
      * Sets the value of the 'instid' field.
      * @param value The value of 'instid'.
      * @return This builder.
      */
    public net.alexyu.poc.model.Instrument.Builder setInstid(java.lang.String value) {
      validate(fields()[0], value);
      this.instid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'instid' field has been set.
      * @return True if the 'instid' field has been set, false otherwise.
      */
    public boolean hasInstid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'instid' field.
      * @return This builder.
      */
    public net.alexyu.poc.model.Instrument.Builder clearInstid() {
      instid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ccy' field.
      * @return The value.
      */
    public java.lang.String getCcy() {
      return ccy;
    }

    /**
      * Sets the value of the 'ccy' field.
      * @param value The value of 'ccy'.
      * @return This builder.
      */
    public net.alexyu.poc.model.Instrument.Builder setCcy(java.lang.String value) {
      validate(fields()[1], value);
      this.ccy = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ccy' field has been set.
      * @return True if the 'ccy' field has been set, false otherwise.
      */
    public boolean hasCcy() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ccy' field.
      * @return This builder.
      */
    public net.alexyu.poc.model.Instrument.Builder clearCcy() {
      ccy = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public java.lang.String getCountry() {
      return country;
    }

    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public net.alexyu.poc.model.Instrument.Builder setCountry(java.lang.String value) {
      validate(fields()[2], value);
      this.country = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public net.alexyu.poc.model.Instrument.Builder clearCountry() {
      country = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'gicsSector' field.
      * @return The value.
      */
    public java.lang.String getGicsSector() {
      return gicsSector;
    }

    /**
      * Sets the value of the 'gicsSector' field.
      * @param value The value of 'gicsSector'.
      * @return This builder.
      */
    public net.alexyu.poc.model.Instrument.Builder setGicsSector(java.lang.String value) {
      validate(fields()[3], value);
      this.gicsSector = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'gicsSector' field has been set.
      * @return True if the 'gicsSector' field has been set, false otherwise.
      */
    public boolean hasGicsSector() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'gicsSector' field.
      * @return This builder.
      */
    public net.alexyu.poc.model.Instrument.Builder clearGicsSector() {
      gicsSector = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'gicsIndustry' field.
      * @return The value.
      */
    public java.lang.String getGicsIndustry() {
      return gicsIndustry;
    }

    /**
      * Sets the value of the 'gicsIndustry' field.
      * @param value The value of 'gicsIndustry'.
      * @return This builder.
      */
    public net.alexyu.poc.model.Instrument.Builder setGicsIndustry(java.lang.String value) {
      validate(fields()[4], value);
      this.gicsIndustry = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'gicsIndustry' field has been set.
      * @return True if the 'gicsIndustry' field has been set, false otherwise.
      */
    public boolean hasGicsIndustry() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'gicsIndustry' field.
      * @return This builder.
      */
    public net.alexyu.poc.model.Instrument.Builder clearGicsIndustry() {
      gicsIndustry = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Instrument build() {
      try {
        Instrument record = new Instrument();
        record.instid = fieldSetFlags()[0] ? this.instid : (java.lang.String) defaultValue(fields()[0]);
        record.ccy = fieldSetFlags()[1] ? this.ccy : (java.lang.String) defaultValue(fields()[1]);
        record.country = fieldSetFlags()[2] ? this.country : (java.lang.String) defaultValue(fields()[2]);
        record.gicsSector = fieldSetFlags()[3] ? this.gicsSector : (java.lang.String) defaultValue(fields()[3]);
        record.gicsIndustry = fieldSetFlags()[4] ? this.gicsIndustry : (java.lang.String) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Instrument>
    WRITER$ = (org.apache.avro.io.DatumWriter<Instrument>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Instrument>
    READER$ = (org.apache.avro.io.DatumReader<Instrument>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
